<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<!--log日志文件目录设置：tomcat根目录下的logs目录-->
	<property name="log.base" value="${catalina.base}/logs/" />

	<!--日志记录到控制台-->
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%date %level [%thread] %logger{36}: %line  %msg%n</pattern>
		</layout>
	</appender>
	<!-- 异步记录到控制台 -->
	<appender name="ASYNC_stdout" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --> 
    	<discardingThreshold>0</discardingThreshold>
    	<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->  
    	<queueSize>1000</queueSize>
    	<!-- 添加附加的appender,最多只能添加一个 -->  
    	<appender-ref ref="stdout" />
    </appender>
	
	<!--日志记录到log文件-->
	<appender name="SizeAndTimeBasedRollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--log日志文件保存的目录及文件名  日志文件名为app_log.log-->
		<file>${log.base}mcssweb_log.log</file> 
		<!--追加方式-->
		<append>true</append>
		<!--设置日志文件大小为最大20MB-->
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"> 
			<maxFileSize>20MB</maxFileSize> 
		</triggeringPolicy>
		<!--当日志文件大小超过20MB后将该日志文件压缩到app_log-i.log.zip，压缩后文件大小约1M左右
			i的最小值为1，最大值为100，当i超过100后i重新为1，如此循环。
		-->
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy"> 
			<fileNamePattern>${log.base}mcssweb_log-%i.log.zip</fileNamePattern> 
			<minIndex>1</minIndex> 
			<maxIndex>100</maxIndex> 
		</rollingPolicy> 
		<encoder>
			<pattern>%date %level [%thread] %logger{36}: %line  %msg%n</pattern>
		</encoder>
	</appender>
	<!-- 异步记录到log文件 -->  
	<appender name="ASYNC_SizeAndTimeBasedRollingFile" class="ch.qos.logback.classic.AsyncAppender">
    	<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->  
    	<discardingThreshold>0</discardingThreshold>
    	<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->  
    	<queueSize>1000</queueSize>
    	<!-- 添加附加的appender,最多只能添加一个 -->  
    	<appender-ref ref="SizeAndTimeBasedRollingFile" />
    </appender>

	
	<!--日志记录到数据库 -->  
    <appender name="oracle_DB" class="cn.howso.framework.log.DBAppender">
    	<!--自定义数据保存处理Bean，必须实现IDBLogHandler接口-->
    	<!--<handler>cn.howso.log.DBLogHandler</handler>-->
    	<!--过滤掉INFO级别以下的日志-->
    	<filter class="ch.qos.logback.classic.filter.ThresholdFilter"> 
    		<level>INFO</level> 
    	</filter>
        <!--数据库连接池 --> 
        <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
           <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">
              <driverClass>oracle.jdbc.driver.OracleDriver</driverClass>
              <url>jdbc:oracle:thin:@127.0.0.1:1521:orcl</url>
              <user>hs_pm</user>
              <password>password</password>
              <initialPoolSize>50</initialPoolSize>
              <maxPoolSize>100</maxPoolSize>
              <maxIdleTime>8000</maxIdleTime>
           </dataSource>
        </connectionSource>
    </appender> 
    <!--日志异步到数据库 -->  
    <appender name="ASYNC_oracle_DB" class="ch.qos.logback.classic.AsyncAppender">
    	<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --> 
    	<discardingThreshold>0</discardingThreshold>
    	<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->  
    	<queueSize>1000</queueSize>
    	<!-- 添加附加的appender,最多只能添加一个 -->  
    	<appender-ref ref="oracle_DB" />
    </appender>
    
	<!--logger 模块-->  
	<logger name="org" level="DEBUG" />
	<logger name="cn.howso" level="DEBUG" />
	<root level="ERROR">
		<appender-ref ref="ASYNC_stdout" /> 
		<appender-ref ref="ASYNC_SizeAndTimeBasedRollingFile" />
		<!--<appender-ref ref="ASYNC_oracle_DB" />-->
	</root>

</configuration>
